#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import psycopg2
import openpyxl
import ssl
import os
from datetime import datetime, timedelta
import numpy as np
import requests
import xml.etree.ElementTree as ET
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", 
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #667eea;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    
    /* –§–∏–∫—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .stPlotlyChart {
        height: auto !important;
        max-height: 500px !important;
        overflow: hidden !important;
    }
    
    /* –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */
    div[data-testid="stVerticalBlock"] > div.element-container {
        height: auto !important;
    }
    
    /* –§–∏–∫—Å–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 768px) {
        .stPlotlyChart {
            max-height: 400px !important;
        }
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=3600)  # –ö—ç—à –∫—É—Ä—Å–æ–≤ –Ω–∞ 1 —á–∞—Å
def get_cbr_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    try:
        url = "http://www.cbr.ru/scripts/XML_daily.asp"
        response = requests.get(url, timeout=10)
        response.encoding = 'windows-1251'
        
        root = ET.fromstring(response.content)
        
        rates = {'RUB': 1.0}  # –†—É–±–ª—å = 1
        
        for valute in root.findall('Valute'):
            char_code = valute.find('CharCode').text
            value = valute.find('Value').text.replace(',', '.')
            nominal = valute.find('Nominal').text
            
            if char_code in ['USD', 'EUR']:
                rate = float(value) / float(nominal)
                rates[char_code] = rate
        
        return rates
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¶–ë –†–§: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã –∫–∞–∫ fallback
        return {'RUB': 1.0, 'USD': 95.0, 'EUR': 105.0}

def convert_to_rub(amount, currency, rates):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã –≤ —Ä—É–±–ª–∏"""
    if currency == 'RUB':
        return amount
    return amount * rates.get(currency, 1.0)

def get_database_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        connection_params = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': int(os.getenv('DB_PORT', '5432')),
            'database': os.getenv('DB_NAME', 'calcus_db'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', ''),
            'sslmode': os.getenv('DB_SSLMODE', 'prefer'),
            'sslcert': os.getenv('DB_SSLCERT'),
            'sslkey': os.getenv('DB_SSLKEY'),
            'sslrootcert': os.getenv('DB_SSLROOTCERT'),
            'connect_timeout': 10,
            'application_name': 'calcus_dashboard'
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        connection_params = {k: v for k, v in connection_params.items() if v is not None}
        
        conn = psycopg2.connect(**connection_params)
        return conn
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        st.stop()

def execute_query_with_retry(query, max_retries=3):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    for attempt in range(max_retries):
        try:
            conn = get_database_connection()
            if conn is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
            if conn.closed:
                conn = get_database_connection()
            
            df = pd.read_sql(query, conn)
            conn.close()
            return df
            
        except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
            if attempt < max_retries - 1:
                st.warning(f"‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                continue
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                st.stop()
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.stop()

@st.cache_data(ttl=60)  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    
    query = """
    SELECT 
        id,
        client_id,
        created_at,
        user_ip,
        user_agent,
        calculation_type,
        initial_sum,
        target_sum,
        period,
        period_unit,
        interest_rate,
        reinvest_enabled,
        reinvest_period,
        add_period,
        add_sum,
        currency,
        final_amount,
        total_profit,
        total_contributions,
        effective_rate,
        time_months,
        time_formatted,
        api_response_time_ms,
        calculation_version,
        DATE(created_at) as date_only,
        EXTRACT(hour FROM created_at) as hour_only,
        EXTRACT(dow FROM created_at) as day_of_week
    FROM investment_calculations 
    ORDER BY created_at DESC
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    df = execute_query_with_retry(query)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df['created_at'] = pd.to_datetime(df['created_at'])
    df['date_only'] = pd.to_datetime(df['date_only'])
    
    return df

def format_currency(amount, currency='RUB'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if currency == 'RUB':
        return f"{amount:,.0f} ‚ÇΩ"
    elif currency == 'USD':
        return f"${amount:,.0f}"
    elif currency == 'EUR':
        return f"‚Ç¨{amount:,.0f}"
    else:
        return f"{amount:,.0f} {currency}"

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</h1>', unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
        try:
            df = load_data()
            
            if df.empty:
                st.warning("üì≠ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ!")
                st.stop()
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∞–ª—é—Ç
    convert_to_rubles = st.sidebar.checkbox(
        "–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –≤ —Ä—É–±–ª–∏ –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§",
        value=False,
        help="–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ —Å—É–º–º—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –≤ —Ä—É–±–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É –¶–ë –†–§"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    date_range = st.sidebar.date_input(
        "–ü–µ—Ä–∏–æ–¥",
        value=(df['date_only'].min().date(), df['date_only'].max().date()),
        min_value=df['date_only'].min().date(),
        max_value=df['date_only'].max().date()
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∞–ª—é—Ç–∞–º
    currencies = st.sidebar.multiselect(
        "–í–∞–ª—é—Ç—ã",
        options=df['currency'].unique(),
        default=df['currency'].unique()
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ä–∞—Å—á–µ—Ç–æ–≤
    calculation_types = {
        1: "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞",
        4: "–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    available_types = df['calculation_type'].unique()
    type_options = [calculation_types.get(t, f"–¢–∏–ø {t}") for t in available_types]
    
    selected_calc_types = st.sidebar.multiselect(
        "–¢–∏–ø—ã —Ä–∞—Å—á–µ—Ç–æ–≤",
        options=type_options,
        default=type_options
    )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    selected_type_numbers = []
    for selected_type in selected_calc_types:
        for num, name in calculation_types.items():
            if name == selected_type:
                selected_type_numbers.append(num)
                break
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ, —ç—Ç–æ "–¢–∏–ø X"
            if selected_type.startswith("–¢–∏–ø "):
                type_num = int(selected_type.split(" ")[1])
                selected_type_numbers.append(type_num)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ä–∞—Å—á–µ—Ç–æ–≤
    st.sidebar.markdown("---")
    st.sidebar.subheader("–§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º–µ
    min_initial = float(df['initial_sum'].min())
    max_initial = float(df['initial_sum'].max())
    initial_sum_range = st.sidebar.slider(
        "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (‚ÇΩ)",
        min_value=min_initial,
        max_value=max_initial,
        value=(min_initial, max_initial),
        step=100000.0,
        format="%.0f"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    min_rate = float(df['interest_rate'].min())
    max_rate = float(df['interest_rate'].max())
    interest_rate_range = st.sidebar.slider(
        "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)",
        min_value=min_rate,
        max_value=max_rate,
        value=(min_rate, max_rate),
        step=0.5,
        format="%.1f"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–∞ 1)
    if 1 in selected_type_numbers:
        df_type1 = df[df['calculation_type'] == 1]
        if not df_type1.empty:
            min_period = int(df_type1['period'].min())
            max_period = int(df_type1['period'].max())
            period_range = st.sidebar.slider(
                "–ü–µ—Ä–∏–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–º–µ—Å.)",
                min_value=min_period,
                max_value=max_period,
                value=(min_period, max_period),
                step=1
            )
        else:
            period_range = None
    else:
        period_range = None
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–∞ 4)
    if 4 in selected_type_numbers:
        df_type4 = df[df['calculation_type'] == 4]
        if not df_type4.empty and df_type4['target_sum'].notna().any():
            min_target = float(df_type4['target_sum'].min())
            max_target = float(df_type4['target_sum'].max())
            target_sum_range = st.sidebar.slider(
                "–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ (‚ÇΩ)",
                min_value=min_target,
                max_value=max_target,
                value=(min_target, max_target),
                step=100000.0,
                format="%.0f"
            )
        else:
            target_sum_range = None
    else:
        target_sum_range = None
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    reinvest_options = st.sidebar.multiselect(
        "–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        options=["–° —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", "–ë–µ–∑ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
        default=["–° —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", "–ë–µ–∑ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"]
    )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
    reinvest_values = []
    if "–° —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º" in reinvest_options:
        reinvest_values.append(True)
    if "–ë–µ–∑ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" in reinvest_options:
        reinvest_values.append(False)
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–µ
    min_final = float(df['final_amount'].min())
    max_final = float(df['final_amount'].max())
    final_amount_range = st.sidebar.slider(
        "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (‚ÇΩ)",
        min_value=min_final,
        max_value=max_final,
        value=(min_final, max_final),
        step=100000.0,
        format="%.0f"
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–±—ã–ª–∏
    min_profit = float(df['total_profit'].min())
    max_profit = float(df['total_profit'].max())
    profit_range = st.sidebar.slider(
        "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)",
        min_value=min_profit,
        max_value=max_profit,
        value=(min_profit, max_profit),
        step=50000.0,
        format="%.0f"
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    conditions = [
        (df['currency'].isin(currencies)),
        (df['calculation_type'].isin(selected_type_numbers)),
        (df['initial_sum'] >= initial_sum_range[0]),
        (df['initial_sum'] <= initial_sum_range[1]),
        (df['interest_rate'] >= interest_rate_range[0]),
        (df['interest_rate'] <= interest_rate_range[1]),
        (df['final_amount'] >= final_amount_range[0]),
        (df['final_amount'] <= final_amount_range[1]),
        (df['total_profit'] >= profit_range[0]),
        (df['total_profit'] <= profit_range[1])
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
    if len(date_range) == 2:
        conditions.extend([
            (df['date_only'].dt.date >= date_range[0]),
            (df['date_only'].dt.date <= date_range[1])
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É –¥–ª—è —Ç–∏–ø–∞ 1
    if period_range is not None:
        conditions.append(
            (df['calculation_type'] != 1) | 
            ((df['period'] >= period_range[0]) & (df['period'] <= period_range[1]))
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º–µ –¥–ª—è —Ç–∏–ø–∞ 4
    if target_sum_range is not None:
        conditions.append(
            (df['calculation_type'] != 4) | 
            ((df['target_sum'] >= target_sum_range[0]) & (df['target_sum'] <= target_sum_range[1]))
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    if reinvest_values:
        conditions.append(df['reinvest_enabled'].isin(reinvest_values))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
    df_filtered = df
    for condition in conditions:
        df_filtered = df_filtered[condition]
    
    if df_filtered.empty:
        st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤!")
        st.stop()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    total_records = len(df)
    filtered_records = len(df_filtered)
    filter_ratio = (filtered_records / total_records) * 100
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    col1, col2 = st.columns([4, 1])
    
    with col1:
        st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {filtered_records:,} –∏–∑ {total_records:,} –∑–∞–ø–∏—Å–µ–π ({filter_ratio:.1f}%)")
    
    with col2:
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        subcol1, subcol2 = st.columns(2)
        
        with subcol1:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_data = df_filtered.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="üìÑ",
                data=csv_data,
                file_name=f"calcus_data_{filtered_records}_records.csv",
                mime="text/csv",
                help=f"–°–∫–∞—á–∞—Ç—å CSV ({filtered_records:,} –∑–∞–ø–∏—Å–µ–π)",
                use_container_width=True
            )
        
        with subcol2:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            import io
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                df_filtered.to_excel(writer, index=False, sheet_name='–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–æ–≤')
            excel_data = excel_buffer.getvalue()
            
            st.download_button(
                label="üìä",
                data=excel_data,
                file_name=f"calcus_data_{filtered_records}_records.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help=f"–°–∫–∞—á–∞—Ç—å Excel ({filtered_records:,} –∑–∞–ø–∏—Å–µ–π)",
                use_container_width=True
            )
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö)
    filter_summary = []
    
    if initial_sum_range[0] > min_initial or initial_sum_range[1] < max_initial:
        filter_summary.append(f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {initial_sum_range[0]/1000000:.1f}–ú - {initial_sum_range[1]/1000000:.1f}–ú‚ÇΩ")
    
    if interest_rate_range[0] > min_rate or interest_rate_range[1] < max_rate:
        filter_summary.append(f"üìà –°—Ç–∞–≤–∫–∞: {interest_rate_range[0]:.1f}% - {interest_rate_range[1]:.1f}%")
    
    if final_amount_range[0] > min_final or final_amount_range[1] < max_final:
        filter_summary.append(f"üéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_amount_range[0]/1000000:.1f}–ú - {final_amount_range[1]/1000000:.1f}–ú‚ÇΩ")
    
    if profit_range[0] > min_profit or profit_range[1] < max_profit:
        filter_summary.append(f"üí∏ –ü—Ä–∏–±—ã–ª—å: {profit_range[0]/1000000:.1f}–ú - {profit_range[1]/1000000:.1f}–ú‚ÇΩ")
    
    if len(reinvest_options) == 1:
        filter_summary.append(f"üîÑ {reinvest_options[0]}")
    
    if filter_summary:
        st.caption("üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: " + " ‚Ä¢ ".join(filter_summary))
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
    if convert_to_rubles:
        df_filtered = df_filtered.copy()
        df_filtered['initial_sum'] = df_filtered.apply(
            lambda row: convert_to_rub(row['initial_sum'], row['currency'], rates), axis=1
        )
        df_filtered['final_amount'] = df_filtered.apply(
            lambda row: convert_to_rub(row['final_amount'], row['currency'], rates), axis=1
        )
        df_filtered['total_profit'] = df_filtered.apply(
            lambda row: convert_to_rub(row['total_profit'], row['currency'], rates), axis=1
        )
        df_filtered['add_sum'] = df_filtered.apply(
            lambda row: convert_to_rub(row['add_sum'], row['currency'], rates) if pd.notna(row['add_sum']) else 0, axis=1
        )
        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ä—É–±–ª—è—Ö
        display_currency = "‚ÇΩ (–ø–µ—Ä–µ—Å—á–µ—Ç –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§)"
    else:
        display_currency = "—Å–º–µ—à–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{len(df_filtered):,}</div>
            <div class="metric-label">–í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        unique_users = df_filtered['client_id'].nunique()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{unique_users:,}</div>
            <div class="metric-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        median_initial = df_filtered['initial_sum'].median()
        currency_suffix = "‚ÇΩ" if convert_to_rubles else ""
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{median_initial/1000000:.1f}–ú{currency_suffix}</div>
            <div class="metric-label">–ú–µ–¥–∏–∞–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        median_rate = df_filtered['interest_rate'].median()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{median_rate:.1f}%</div>
            <div class="metric-label">–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—É–º–º–∞–º
    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        median_final = df_filtered['final_amount'].median()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{median_final/1000000:.1f}–ú{currency_suffix}</div>
            <div class="metric-label">–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        median_profit = df_filtered['total_profit'].median()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{median_profit/1000000:.1f}–ú{currency_suffix}</div>
            <div class="metric-label">–ú–µ–¥–∏–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        total_invested = df_filtered['initial_sum'].sum()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{total_invested/1000000000:.1f}–º–ª—Ä–¥{currency_suffix}</div>
            <div class="metric-label">–û–±—â–∏–π –æ–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        total_profit = df_filtered['total_profit'].sum()
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{total_profit/1000000000:.1f}–º–ª—Ä–¥{currency_suffix}</div>
            <div class="metric-label">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    calc_type_stats = df_filtered.groupby('calculation_type').agg({
        'id': 'count',
        'client_id': 'nunique'
    }).reset_index()
    
    calc_type_stats['type_name'] = calc_type_stats['calculation_type'].map(
        lambda x: calculation_types.get(x, f"–¢–∏–ø {x}")
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        fig_types = px.pie(
            calc_type_stats,
            values='id',
            names='type_name',
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —Ä–∞—Å—á–µ—Ç–æ–≤"
        )
        fig_types.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=20))
        st.plotly_chart(fig_types, use_container_width=True, key="calc_types_pie")
    
    with col2:
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞—Å—á–µ—Ç–æ–≤:**")
        display_stats = calc_type_stats[['type_name', 'id', 'client_id']].copy()
        display_stats.columns = ['–¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']
        st.dataframe(display_stats, use_container_width=True)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è "–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"
    time_goal_data = df_filtered[df_filtered['calculation_type'] == 4]
    if not time_goal_data.empty:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—á–µ—Ç–æ–≤ '–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏'")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            avg_time = time_goal_data['time_months'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{avg_time:.1f}</div>
                <div class="metric-label">–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ (–º–µ—Å.)</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            median_time = time_goal_data['time_months'].median()
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{median_time:.1f}</div>
                <div class="metric-label">–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ (–º–µ—Å.)</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            avg_target = time_goal_data['target_sum'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value">{avg_target/1000000:.1f}–ú‚ÇΩ</div>
                <div class="metric-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–ª—å</div>
            </div>
            """, unsafe_allow_html=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        col1, col2 = st.columns(2)
        
        with col1:
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            time_bins = [0, 12, 24, 36, 60, 120, float('inf')]
            time_labels = ['<1 –≥–æ–¥–∞', '1-2 –≥–æ–¥–∞', '2-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '5-10 –ª–µ—Ç', '>10 –ª–µ—Ç']
            
            time_goal_data_copy = time_goal_data.copy()
            time_goal_data_copy['time_range'] = pd.cut(
                time_goal_data_copy['time_months'],
                bins=time_bins,
                labels=time_labels
            )
            time_dist = time_goal_data_copy['time_range'].value_counts().sort_index()
            
            fig_time = px.bar(
                x=time_dist.index,
                y=time_dist.values,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏",
                color_discrete_sequence=['#667eea']
            )
            fig_time.update_layout(
                height=350,
                margin=dict(l=20, r=20, t=40, b=20),
                xaxis_title="–°—Ä–æ–∫",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤"
            )
            fig_time.update_traces(texttemplate='%{y}', textposition='auto')
            st.plotly_chart(fig_time, use_container_width=True, key="time_distribution")
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–≤—ã—Ö —Å—É–º–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
            target_bins = [0, 1000000, 5000000, 10000000, 50000000, float('inf')]
            target_labels = ['<1M', '1M-5M', '5M-10M', '10M-50M', '>50M']
            
            time_goal_data_copy['target_range'] = pd.cut(
                time_goal_data_copy['target_sum'],
                bins=target_bins,
                labels=target_labels
            )
            target_dist = time_goal_data_copy['target_range'].value_counts().sort_index()
            
            fig_target = px.bar(
                x=target_dist.index,
                y=target_dist.values,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å—É–º–º",
                color_discrete_sequence=['#667eea']
            )
            fig_target.update_layout(
                height=350,
                margin=dict(l=20, r=20, t=40, b=20),
                xaxis_title="–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤"
            )
            fig_target.update_traces(texttemplate='%{y}', textposition='auto')
            st.plotly_chart(fig_target, use_container_width=True, key="target_distribution")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns(2)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    with col1:
        st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
        daily_stats = df_filtered.groupby('date_only').agg({
            'id': 'count',
            'client_id': 'nunique'
        }).reset_index()
        daily_stats.columns = ['–î–∞—Ç–∞', '–†–∞—Å—á–µ—Ç—ã', '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']
        
        fig1 = go.Figure()
        fig1.add_trace(go.Scatter(
            x=daily_stats['–î–∞—Ç–∞'], 
            y=daily_stats['–†–∞—Å—á–µ—Ç—ã'],
            mode='lines+markers',
            name='–†–∞—Å—á–µ—Ç—ã',
            line=dict(color='#667eea', width=3),
            marker=dict(size=8)
        ))
        fig1.add_trace(go.Scatter(
            x=daily_stats['–î–∞—Ç–∞'], 
            y=daily_stats['–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
            mode='lines+markers',
            name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            line=dict(color='#f093fb', width=3),
            marker=dict(size=8)
        ))
        fig1.update_layout(
            height=380,
            margin=dict(l=20, r=20, t=40, b=20),
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            autosize=False,
            showlegend=True
        )
        st.plotly_chart(fig1, use_container_width=True, key="daily_activity")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–ª—é—Ç–∞–º
    with col2:
        st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç")
        currency_stats = df_filtered.groupby('currency').agg({
            'id': 'count',
            'initial_sum': 'mean'
        }).reset_index()
        
        fig2 = px.pie(
            currency_stats, 
            values='id', 
            names='currency',
            title="",
            color_discrete_map={'RUB': '#667eea', 'USD': '#f093fb', 'EUR': '#36d1dc'}
        )
        fig2.update_traces(
            textposition='inside', 
            textinfo='percent+label',
            textfont_size=14,
            marker=dict(line=dict(color='#FFFFFF', width=2))
        )
        fig2.update_layout(
            height=380, 
            margin=dict(l=20, r=20, t=40, b=20),
            autosize=False
        )
        st.plotly_chart(fig2, use_container_width=True, key="currency_pie")
    
    # –ë–æ–ª—å—à–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—É–º–º–∞–º")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    col1, col2 = st.columns(2)
    
    with col1:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ title –≥—Ä–∞—Ñ–∏–∫–∞
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞–ª—ã—Ö —Å—É–º–º)
        if convert_to_rubles:
            bins = [0, 50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, float('inf')]
            labels = ['<50–ö‚ÇΩ', '50–ö-100–ö‚ÇΩ', '100–ö-200–ö‚ÇΩ', '200–ö-500–ö‚ÇΩ', '500–ö-1–ú‚ÇΩ', '1–ú-2–ú‚ÇΩ', '2–ú-5–ú‚ÇΩ', '5–ú-10–ú‚ÇΩ', '>10–ú‚ÇΩ']
        else:
            bins = [0, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000, 5000000, float('inf')]
            labels = ['<5K', '5K-10K', '10K-20K', '20K-50K', '50K-100K', '100K-200K', '200K-500K', '500K-1M', '1M-5M', '>5M']
        
        df_filtered['initial_sum_range'] = pd.cut(
            df_filtered['initial_sum'], 
            bins=bins,
            labels=labels
        )
        sum_dist = df_filtered['initial_sum_range'].value_counts().sort_index()
        
        fig3 = px.bar(
            x=sum_dist.index,
            y=sum_dist.values,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—É–º–º",
            color_discrete_sequence=['#667eea']
        )
        fig3.update_layout(
            height=350,
            showlegend=False,
            margin=dict(l=20, r=20, t=40, b=20),
            autosize=False
        )
        fig3.update_traces(texttemplate='%{y}', textposition='auto')
        st.plotly_chart(fig3, use_container_width=True, key="initial_sums")
    
    with col2:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ title –≥—Ä–∞—Ñ–∏–∫–∞
        
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º (–æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö, –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏)
        if convert_to_rubles:
            bins_final = [0, 200000, 1000000, 2000000, 5000000, 10000000, 20000000, 50000000, float('inf')]
            labels_final = ['<200–ö‚ÇΩ', '200–ö-1–ú‚ÇΩ', '1–ú-2–ú‚ÇΩ', '2–ú-5–ú‚ÇΩ', '5–ú-10–ú‚ÇΩ', '10–ú-20–ú‚ÇΩ', '20–ú-50–ú‚ÇΩ', '>50–ú‚ÇΩ']
        else:
            bins_final = [0, 50000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, float('inf')]
            labels_final = ['<50K', '50K-200K', '200K-500K', '500K-1M', '1M-2M', '2M-5M', '5M-10M', '>10M']
        
        df_filtered['final_amount_range'] = pd.cut(
            df_filtered['final_amount'], 
            bins=bins_final,
            labels=labels_final
        )
        final_dist = df_filtered['final_amount_range'].value_counts().sort_index()
        
        fig4 = px.bar(
            x=final_dist.index,
            y=final_dist.values,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º",
            color_discrete_sequence=['#667eea']
        )
        fig4.update_layout(
            height=350,
            showlegend=False,
            margin=dict(l=20, r=20, t=40, b=20),
            autosize=False
        )
        fig4.update_traces(texttemplate='%{y}', textposition='auto')
        st.plotly_chart(fig4, use_container_width=True, key="final_amounts")
    
    # –ù–æ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ title –≥—Ä–∞—Ñ–∏–∫–∞
        
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø—Ä–∏–±—ã–ª–∏ (–±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏)
        if convert_to_rubles:
            bins_profit = [0, 50000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, float('inf')]
            labels_profit = ['<50–ö‚ÇΩ', '50–ö-200–ö‚ÇΩ', '200–ö-500–ö‚ÇΩ', '500–ö-1–ú‚ÇΩ', '1–ú-2–ú‚ÇΩ', '2–ú-5–ú‚ÇΩ', '5–ú-10–ú‚ÇΩ', '>10–ú‚ÇΩ']
        else:
            bins_profit = [0, 10000, 50000, 100000, 200000, 500000, 1000000, 2000000, float('inf')]
            labels_profit = ['<10K', '10K-50K', '50K-100K', '100K-200K', '200K-500K', '500K-1M', '1M-2M', '>2M']
        
        df_filtered['profit_range'] = pd.cut(
            df_filtered['total_profit'], 
            bins=bins_profit,
            labels=labels_profit
        )
        profit_dist = df_filtered['profit_range'].value_counts().sort_index()
        
        fig5 = px.bar(
            x=profit_dist.index,
            y=profit_dist.values,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏",
            color_discrete_sequence=['#667eea']
        )
        fig5.update_layout(
            height=350,
            showlegend=False,
            margin=dict(l=20, r=20, t=40, b=20),
            autosize=False
        )
        fig5.update_traces(texttemplate='%{y}', textposition='auto')
        st.plotly_chart(fig5, use_container_width=True, key="profit_dist")
    
    with col2:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ title –≥—Ä–∞—Ñ–∏–∫–∞
        fig6 = px.histogram(
            df_filtered, 
            x='interest_rate',
            nbins=15,
            color_discrete_sequence=['#667eea'],
            title="–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"
        )
        fig6.update_layout(
            height=350,
            margin=dict(l=20, r=20, t=40, b=20),
            xaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤",
            autosize=False
        )
        st.plotly_chart(fig6, use_container_width=True, key="interest_rates")
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∏ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    st.write("**üïê –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∞—Å/–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)**")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    activity_pivot = df_filtered.pivot_table(
        values='id', 
        index='hour_only', 
        columns='day_of_week', 
        aggfunc='count', 
        fill_value=0
    )
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    activity_pivot.columns = [day_names[int(col)] for col in activity_pivot.columns]
    
    fig7 = px.imshow(
        activity_pivot.T,  # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        labels=dict(x="–ß–∞—Å", y="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤"),
        aspect="auto",
        color_continuous_scale='viridis'
    )
    fig7.update_layout(
        height=300, 
        margin=dict(l=20, r=20, t=20, b=20),
        autosize=False
    )
    st.plotly_chart(fig7, use_container_width=True, key="heatmap")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
    st.subheader("–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    top_clients = df_filtered.groupby('client_id').agg({
        'id': 'count',
        'initial_sum': 'mean',
        'final_amount': 'mean',
        'created_at': 'max'
    }).round(0).sort_values('id', ascending=False).head(10)
    
    top_clients.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    top_clients_display = top_clients.copy()
    top_clients_display['–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞'] = top_clients_display['–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞'].apply(
        lambda x: f"{x/1000000:.1f}–ú ‚ÇΩ"
    )
    top_clients_display['–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'] = top_clients_display['–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'].apply(
        lambda x: f"{x/1000000:.1f}–ú ‚ÇΩ"
    )
    top_clients_display['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç'] = pd.to_datetime(top_clients_display['–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç']).dt.strftime('%d.%m.%Y %H:%M')
    
    st.dataframe(top_clients_display, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API")
        avg_response = df_filtered['api_response_time_ms'].mean()
        median_response = df_filtered['api_response_time_ms'].median()
        max_response = df_filtered['api_response_time_ms'].max()
        
        perf_metrics = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', '–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ (ms)': [avg_response, median_response, max_response]
        })
        
        fig8 = px.bar(
            perf_metrics, 
            x='–ú–µ—Ç—Ä–∏–∫–∞', 
            y='–ó–Ω–∞—á–µ–Ω–∏–µ (ms)',
            color='–ó–Ω–∞—á–µ–Ω–∏–µ (ms)',
            color_continuous_scale='RdYlGn_r'
        )
        fig8.update_layout(
            height=300,
            showlegend=False,
            margin=dict(l=20, r=20, t=20, b=20),
            autosize=False
        )
        st.plotly_chart(fig8, use_container_width=True, key="performance")
    
    with col2:
        st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        summary_stats = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': [
                '–û–±—â–∏–π –æ–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
                '–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å',
                '–°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (–ª–µ—Ç)',
                '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"{df_filtered['initial_sum'].sum()/1000000000:.1f}–º–ª—Ä–¥ ‚ÇΩ",
                f"{df_filtered['total_profit'].sum()/1000000000:.1f}–º–ª—Ä–¥ ‚ÇΩ", 
                f"{df_filtered[df_filtered['period_unit']=='y']['period'].mean():.1f}",
                df_filtered['currency'].value_counts().index[0]
            ]
        })
        
        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.dataframe(
            summary_stats.set_index('–ú–µ—Ç—Ä–∏–∫–∞'),
            use_container_width=True
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤–Ω–∏–∑—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.markdown("---")
    st.sidebar.subheader("üí± –ö—É—Ä—Å—ã –¶–ë –†–§")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    rates = get_cbr_rates()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—É—Ä—Å—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    currency_info = []
    for curr, rate in rates.items():
        if curr != 'RUB':
            currency_info.append(f"**{curr}:** {rate:.2f}‚ÇΩ")
    
    currency_string = " ‚Ä¢ ".join(currency_info)
    st.sidebar.markdown(currency_string)
    
    st.sidebar.markdown("---")
    st.sidebar.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")
    st.sidebar.markdown(f"**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î:** {len(df):,}")
    st.sidebar.markdown(f"**–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö:** {df['date_only'].min().strftime('%d.%m.%Y')} - {df['date_only'].max().strftime('%d.%m.%Y')}")

if __name__ == "__main__":
    main() 